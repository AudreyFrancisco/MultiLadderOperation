#ifndef BOARDCONFIGDAQ_H
#define BOARDCONFIGDAQ_H

#include <unistd.h>
#include "TBoardConfig.h"

/// \class TBoardConfigDAQ
/// \brief Config related to firmware modules for Cagliari DAQboard.

class TBoardConfigDAQ : public TBoardConfig {
    
private:
    #pragma mark - ADC module

    //--- reg 0
    
    /// ADC config reg 0, bits 11: 0; threshold current for digital supply.
  int fCurrentLimitDigital;
    
    /// ADC config reg 0, bits 23:12; threshold current for digital io supply.
  int fCurrentLimitIo;
    
    /// ADC config reg 0, bits 24; 0: disable, 1: enable.
  bool fAutoShutdownEnable;
    
    /// ADC config reg 0, bits 25; 0: disable, 1: enable; LDOAutoShutOff.
    /** LDOAutoShutOff has no effect if this it is not set. */
  bool fLDOEnable;
    
    /// ADC config reg 0, bits 26; 0: disable, 1: enable current/voltage sampling.
  bool fADCEnable;
    
    /** ADC config reg 0, bit 27.
     *  Samples (pre-samples + post-samples) are sent to the user only if a latch-up
     *  event occurs.
     */
  bool fADCSelfStop;
    
    /** ADC config reg 0, bit 28.
     *  If set, disables the reset of the timestamp counter with the strobe; 
     *  default is 0.
     */
  bool fDisableTstmpReset;
    
    /** ADC config reg 0, bit 29.
     *  Enables/disables packet based readout for the ADCs; default is 0.
     */
  bool fPktBasedROEnableADC;

    //--- reg 1

    /// ADC config reg 1, bits 11: 0; threshold current for analogue supply.
  int fCurrentLimitAnalogue;

    //--- reg 2

    /// ADC config reg 2, bits 19: 0; delay with a granularity of 12.5ns.
  uint32_t fAutoShutOffDelay;
    
    /// ADC config reg 2, bits 31:20; factor for downscaling ADC sampling rate.
    /** 1.194MHz/(fADCDownSamplingFact+1) */
  int fADCDownSamplingFact;

    #pragma mark - READOUT module

    /** Event builder config reg, bits 3: 0.
     *  Maximum difference between the number of triggers sent and 
     *  the number of events recorded before the busy signal to the TLU is set high.
     */
  int fMaxDiffTriggers;
    
    /** Event builder config reg, bit 4.
     *  0: positive edge, 1: negative edge (for pA1 inverted).
     *  Edge of clock on which the chip event data is sampled in the FPGA 
     *  event builder.
     */
  bool fSamplingEdgeSelect;

    /// Event builder config reg, bit 5; 0: disable, 1: enable.
  bool fPktBasedROEnable;
    
    /// Event builder config reg, bit 6; 0: disable, 1: enable.
  bool fDDREnable;
    
    /// Event builder config reg, bits 8: 7; 01: serial port, 10: parallel port.
  int fDataPortSelect;
    
    /** Event builder config reg, bits 10: 9.
     * - 00: FPGA is bus master, chip is in IB or OB master mode (default).
     * - 01: the FPGA emulates an OB master, chip is slave (!! not working with \n
     *   pA3 and later versions).
     * - 10: the FPGA emulates an OB slave, chip is OB master (!! not working with \n
     *   pA3 and later versions).
     */
  int fFPGAEmulationMode;
    
    /** Event builder config reg, bit 11.
     *  As of firmware version 247e0611 the header type can be defined;
     *  0 -> full header; 1 -> short header.
     */
  bool fHeaderType;
    
    /** Event builder config reg, bit 12.
     *  As of firmware version 247e0611 the DAQboard version (v2 or v3) must be
     *  defined; 0 -> v2; 1 -> v3.
     */
  int  fBoardVersion;
  
    #pragma mark - TRIGGER module

    /// Busy config reg, bits 31: 0.
    /** Minimum duration of the busy generated by the trigger sequencer. */
  uint32_t fBusyDuration;
    
  // Trigger configuration register
  //int fNTriggers;             // 15: 0; number of triggers sent to chip; if set to 0, continuous triggering will be performed; TODO: feature ever used? member of base class TBoardConfig

    /** Trigger config reg, bits 18: 16.
     * - 0: disabled;
     * - 1: auto trigger mode: system triggers the chip automatically after a start\n
     *   trigger command;
     * - 2: external trigger mode: system triggers the chip on external trigger after\n
     *   a start trigger command.
     */
  int fTriggerMode;

    /// Trigger config reg, bits 26:19; strobe duration with 25 ns granularity.
    /** Depreciated. */
  int fStrobeDuration;
    
    /** Trigger config reg, bits 29:27; as of fw version 247e0611.
     *  BUSY_OUT = BUSY_IN or DAQ_BUSY or CHIP_BUSY_SIGNAL or CHIP_BUSY_WORD
     * - Bit [29] - Setting this bit excludes CHIP_BUSY_WORD from the busy logic
     * - Bit [28] - Setting this bit excludes CHIP_BUSY_SIGNAL from the busy logic
     * - Bit [27] - Setting this bit excludes BUSY_IN from the busy logic
     */
  int fBusyConfig;

    /** Strobe delay config reg, bits 31: 0.
     *  Delay between the external trigger and the strobe sent to chip; with 25 ns
     *  granularity.
     */
  uint32_t fStrobeDelay;

    /** Busy override config reg, bit 0.
     *  0: TLU busy is overridden, busy to TLU is kept high; 1: TLU busy is not 
     *  overridden.
     */
  bool fBusyOverride;

    #pragma mark - CMU module

    /// CMU config reg, bit 0; 0: enable manchester encoding; 1: disable.
  bool fManchesterDisable;
    
    /** CMU config reg, bit 1; 0: positive edge; 1: negative edge.
     *  Edge of the FPGA clock on which the CMU data is sampled in the FPGA CMU
     *  receiver.
     */
  bool fSamplingEdgeSelectCMU;
    
    /// CMU config reg, bit 2; 0: bus not inverted; 1: bus inverted.
  bool fInvertCMUBus;
    
    /// CMU config reg, bit 3; 0: chip is master; 1: chip is slave.
  bool fChipMaster;

    #pragma mark - RESET module
  
    //---
    
    /// PULSE DRST PRST duration reg, bits 7: 0; depreciated.
  int fPRSTDuration;
    
    /// PULSE DRST PRST duration reg, bits 15: 8.
  int fDRSTDuration;            // TODO: should rather be done via opcode?
    
    /// PULSE DRST PRST duration reg, bits 31:16; depreciated.
  int fPULSEDuration;

    //---
    
    /** Power up sequencer delay reg, bits 7: 0.
     *  Delay with 51.2 us granularity from the LDOs ON to the start of the auto
     *  shutdown mechanism.
     */
  int fAutoShutdownTime;
    
    /** Power up sequencer delay reg, bits 15: 8.
     *  Delay with 51.2 us granularity from the LDOs ON to the enable of 
     *  the pALPIDEfs clock.
     */
  int fClockEnableTime;
    
    
    /** Power up sequencer delay reg, bits 23:16.
     *  Delay with 51.2 us granularity from the LDOs ON to the enable of
     *  the pALPIDEfs input signals (except pCLK and DRST).
     */
  int fSignalEnableTime;
    
    /** Power up sequencer delay reg, bits 32:24.
     *  Delay with 51.2 us granularity from the LDOs ON to the deassertion 
     *  of DRST signal.
     */
  int fDrstTime;

    //---
    
    //
  //int fPulseDelay;            // PULSE STROBE delay sequence reg, bits 15: 0; delay between strobe and pulse; member of base class TBoardConfig;
    
    /** PULSE STROBE delay sequence reg, bits 17:16.
     * - 0: pulse is generated after write access to pulse command register
     * - 1: strobe - delay - pulse; pulse is generated after a delay with respect to\n
     *   the strobe
     * - 2: pulse - delay - strobe; pulse is generated after a write access to pulse\
     *   command register and a delay is enabled for a generated strobe;\n
     *   this strobe goes to the trigger sequencer module in external trigger mode
     * - 3: just pulse
     */
  int fStrobePulseSeq;

    //---
    
    /// PowerOnReset disable reg, bit 0; 0: enable POR; 1: disable.
  bool fPORDisable;

    #pragma mark - SOFTRESET module
  
    /// Software reset duration reg, bits 7: 0; software reset duration.
  int fSoftResetDuration;

protected:
    #pragma mark - protected method
  void InitParamMap();
    
protected:
    #pragma mark - static const protected data members
    //--------------------------------------------------------

    /// ADC module (default 300).
    static const int LIMIT_DIGITAL;
    
    /// ADC module (default 50).
    /** Depreciated but leave in to write the register to some defined value. */
    static const int LIMIT_IO;
    
    /// ADC module (default 300).
    static const int LIMIT_ANALOGUE;
    
    //--------------------------------------------------------

    /// READOUT module (default true).
    static const bool DATA_SAMPLING_EDGE;

    /// READOUT module (default false).
    /** Packet based readout default now! */
    static const bool DATA_PKTBASED_EN;

    /// READOUT module (default false).
    static const bool DATA_DDR_EN;

    /// READOUT module (default 2).
    static const int  DATA_PORT;

    /** READOUT module (default true).
     *  As of firmware version 247e0611 the header type can be defined;
     *  0 -> full header (default); 1 -> short header.
     */
    static const bool HEADER_TYPE;

    /** READOUT module (default 1).
     *  As of firmware version 247e0611 the DAQboard version (v2 or v3) must be
     *  defined; 0 -> v2; 1 -> v3.
     */
    static const int  BOARD_VERSION;
    
    //--------------------------------------------------------
    
    /// TRIGGER module (default 2).
    /** 2: external, 1:internal */
    static const int TRIGGER_MODE;
    
    /** TRIGGER module (default 10).
     *  Delay between external trigger and trigger sent to chip; when configuring 
     *  the feature with a train of N triggers, this will be the delay between
     *  subsequent triggers.
     */
    static const uint32_t STROBE_DELAY;
    
    /// TRIGGER module (default false).
    /** As of firmware version 247e0611. */
    static const bool BUSY_CONFIG;
    
    /// TRIGGER module (default true).
    static const bool BUSY_OVERRIDE;
    
    //--------------------------------------------------------

    /// RESET module (default 10).
    /** Time until enabling of auto shutdown. */
    static const int AUTOSHTDWN_TIME;
    
    /// RESET module (default 12).
    /** Time until clock is enabled. */
    static const int CLOCK_ENABLE_TIME;

    /// RESET module (default 12).
    /** Time until signals are enabled. */
    static const int SIGNAL_ENABLE_TIME;
    
    /// RESET module (default 13).
    /** Time until drst is deasserted. */
    static const int DRST_TIME;
    
    /// RESET module (default 10).
    static const int PULSE_STROBE_DELAY;

    /// RESET module (default 2).
    /** 3: just send pulse after external trigger. */
    static const int STROBE_PULSE_SEQ;
    
public:
    #pragma mark - constructor/destructor
  TBoardConfigDAQ();
    virtual ~TBoardConfigDAQ() {};

    #pragma mark - getters
  // ADC Module
  int GetCurrentLimitDigital()  {return fCurrentLimitDigital;};
  int GetCurrentLimitIo()       {return fCurrentLimitIo;};
  int GetCurrentLimitAnalogue() {return fCurrentLimitDigital;};
  bool GetAutoShutdownEnable()  {return fAutoShutdownEnable;};
  bool GetLDOEnable()           {return fLDOEnable;};
  bool GetADCEnable()           {return fADCEnable;};
  bool GetADCSelfStop()         {return fADCSelfStop;};
  bool GetDisableTstmpReset()   {return fDisableTstmpReset;};
  bool GetPktBasedROEnableADC() {return fPktBasedROEnableADC;};
  uint32_t GetAutoShutOffDelay(){return fAutoShutOffDelay;};
  int GetADCDownSamplingFact()  {return fADCDownSamplingFact;};

  // READOUT Module
  int GetMaxDiffTriggers()      {return fMaxDiffTriggers;};
  bool GetSamplingEdgeSelect()  {return fSamplingEdgeSelect;};
  bool GetPktBasedROEnable()    {return fPktBasedROEnable;}; 
  bool GetDDREnable()           {return fDDREnable;};
  int GetDataPortSelect()       {return fDataPortSelect;};
  int GetFPGAEmulationMode()    {return fFPGAEmulationMode;};  
  bool GetHeaderType()          {return fHeaderType;};  

  // TRIGGER Module
  uint32_t GetBusyDuration()    {return fBusyDuration;};
  int GetTriggerMode()          {return fTriggerMode;};
  int GetStrobeDuration()       {return fStrobeDuration;};
  uint32_t GetStrobeDelay()     {return fStrobeDelay;};
  int GetBusyConfig()           {return fBusyConfig;}; 
  bool GetBusyOverride()        {return fBusyOverride;};

  // CMU Module
  bool GetManchesterDisable()    {return fManchesterDisable;};
  bool GetSamplingEdgeSelectCMU(){return fSamplingEdgeSelectCMU;};
  bool GetInvertCMUBus()         {return fInvertCMUBus;};
  bool GetChipMaster()           {return fChipMaster;};

  // RESET Module
  int GetPRSTDuration()         {return fPRSTDuration;};
  int GetDRSTDuration()         {return fDRSTDuration;};
  int GetPULSEDuration()        {return fPULSEDuration;};

  int GetStrobePulseSeq()       {return fStrobePulseSeq;};
  int GetPORDisable()           {return fPORDisable;};

  int GetAutoShutdownTime() {return fAutoShutdownTime;};
  int GetClockEnableTime()  {return fClockEnableTime;};
  int GetSignalEnableTime() {return fSignalEnableTime;};
  int GetDrstTime()         {return fDrstTime;};

  // SOFTRESET Module
  int GetSoftResetDuration()     {return fSoftResetDuration;};

    #pragma mark - setters
  // ADC Module
  void SetAutoShutdownEnable(bool enable)  {fAutoShutdownEnable = enable;};
  void SetLDOEnable(bool enable)           {fLDOEnable          = enable;};

  // READOUT Module 
  void SetDataPortSelect(int dataPort)     {fDataPortSelect      = dataPort;};
  void SetPktBasedROEnable(bool enable)    {fPktBasedROEnable    = enable;};

  // TRIGGER Module
  void SetTriggerMode (int triggerMode)    {fTriggerMode        = triggerMode;};
  void SetStrobeDelay (uint32_t delay)     {fStrobeDelay        = delay;};
  void SetBusyOverride(bool busyOverride)  {fBusyOverride       = busyOverride;};
  
  // CMU Module 

  // RESET Module
  void SetDrstTime(int duration)           {fDrstTime           = duration;};
  void SetClockEnableTime(int duration)    {fClockEnableTime    = duration;};
  void SetSignalEnableTime(int duration)   {fSignalEnableTime   = duration;};
  void SetAutoShutdownTime(int duration)   {fAutoShutdownTime   = duration;};
  void SetPORDisable(bool disable)         {fPORDisable         = disable;};

  void SetStrobePulseSeq(int strobePulseSeq) {fStrobePulseSeq   = strobePulseSeq;};

  // ID Module

  // SOFTRESET Module
  void SetSoftResetDuration(int duration)  {fSoftResetDuration  = duration;};

 
};

#endif   /* BOARDCONFIGDAQ_H */
