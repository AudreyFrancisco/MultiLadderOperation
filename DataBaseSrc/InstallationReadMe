==================================================

    **** AlpideDB  ****
    
    ReadMe for the installation

	ver 1.0		02/08/2017
	Auth.  A.Franco  - INFN sez. BARI - Italy
	
 
 		- History -
 
==================================================
 
 The AlpideDB library could be build with two authentication methods:
 
 	a) Kerberos V.5
 	b) X509 Certificate/Key files
 	
 In addition the remote access to the Web DB API could be done through the 
 libcurl library or by curl shell commands.
 
 In order to select the options some compilation flags will be set in 
 the file "utilities.h"
 
	 **  Compilation Flags  **
 
	#define COMPILE_LIBCURL   	 <-	Undefine it if you don't want to use libcurl

	#define AUTH_KERBEROS  <- Define if you want use Kerberos authentication
	#define AUTH_X509	   <- Define if you want use X509 authentication

	#define VERBOSITYLEVEL 0L	<- Define 1L if you want some debug messages
 

 
    
  1.Dependency
  
  	The DB extension needs this packages:
  		- libxml2
  		- cern-sso 
  		- cern-CA
  		
  	if COMPILE_LIBCURL is defined
  		- libcurl 

 	if AUTH_X509 and COMPILE_LIBCURL are defined
  		- certutil
  		
	** remember to add in the make file **

	-library  curl xml2
	
  		
  2.Certificates
  
  	If the AUTH_X509 option is defined then a valid pair of UserCert.pem
  	and UserKey.pem files.
  	The certificate must be for a CERN user account enabled on the Alpide DB
  	
  	
  3. Create a NSS database
   
    If the AUTH_X509 and COMPILE_LIBCURL are defined the we need to create 
    a NSS database (the CERN version of libcurl was tailored for this 
    infrastructure)

    a)  Choose a safe path location (could be also the new-alpide-software)
    	then 
    		user$ certutil -N -d <pathOfNSSdb>
    		
    	and setup an access password for the NSS db (remember it !)

  
  	b)	Convert the PEM certificate/key couple into the p12 format,
	    in order to do this take in account the path of the certificate (.pem)
	    and key (.pem) files and in addition choose a NickName that will be 
	    identify the certificate/key into the NSS db
     	then
     
  			user$ openssl pkcs12 -export -in <usercert.pem> -inkey <userkey.pem> -out ~/UserPair.p12 -name <NickName>
  		
  	c)	Import the p12 file into the NSS db
  
  			user$ pk12util -i ~/UserPair.p12 -d <pathOfNSSdb>
  		
  	d)	Import into the NSS db the CA certificates for the SSL/TLS protocol
  
  		user$ certutil -A -n "CernGridCA" -t "C,," -i /etc/ssl/certs/CERN_Grid_Certification_Authority.crt -d <pathOfNSSdb>
		user$ certutil -A -n "AddTrustCA" -t "C,," -i /etc/ssl/certs/AddTrustExternalCARoot.crt -d <pathOfNSSdb>
 
 		- Now the setup of Certificates/Keys is done, remove the file "~/UserPair.p12" and the .pem files
 
	NOTE : you can skip the step b) if you use directly the p12 format file
 


  4) SETUP  for Kerberos authentication
  
  	remember to set the Kerberos token with the kinit command
  	
  		user$ kinit <user>@CERN.CH
  		user$ Password: ...
  		
  	nothing to setup !
  		
  		
  5) SETUP for the X509 authentication "libcurl" access
  
  	We need to set the NSS DB parameters.
  	
  		a) writing the constant values into the AlpideDB.cpp file
 
 			#ifdef AUTH_X509
    			if(theDBmanager->isLibCurlCompiled()){
    			isConnected = theDBmanager->Init("https://test-alucmsapi.web.cern.ch",
    												"FrancoAntonio",
													".",
													"alpide4me");
    			} else {
    		
  		b) or programmatically
  		  
  			// create an instance of AlpideDb
  			AlpideDB *theDB = new AlpideDB();
  			theDB->SetQueryDomain("https://test-alucmsapi.web.cern.ch/AlucmswebAPI.asmx"); // set the query domain
  			// init the manager with the new set 
		    AlpideDBManager *theDBManager = theDB->GetManagerHandle();
			theDBManager->Init(""https://test-alucmsapi.web.cern.ch",
						"FrancoAntonio",  // the name associated to the CErt/Key in the DB
						".",  // the path where the: cert8.db,key3.db,secmod.db are stored
						"alpide4me");  // the password used to access the NSS DB
  	
  		
  6) SETUP for the X509 authentication "curl" shell access
  
  	We need to set the Certificate/Key files path.
   
  		a) writing the constant values into the AlpideDB.cpp file
 	
    		 } else {
    			isConnected = theDBmanager->Init("https://test-alucmsapi.web.cern.ch",
        	    								"/home/fap/.globus/usercert.pem",
        	    								"/home/fap/.globus/userkey.pem",
        										"/etc/ssl/certs");
    		}
 
  		b) or programmatically
  		  
  			// create an instance of AlpideDb
  			AlpideDB *theDB = new AlpideDB();
  			theDB->SetQueryDomain("https://test-alucmsapi.web.cern.ch/AlucmswebAPI.asmx"); // set the query domain
  			// init the manager with the new set 
		    AlpideDBManager *theDBManager = theDB->GetManagerHandle();
			theDBManager->Init(""https://test-alucmsapi.web.cern.ch",
						"/home/fap/.globus/usercert.pem",  // the path of the Certificate file
						"/home/fap/.globus/userkey.pem",  // the path of the Key file
						"/etc/ssl/certs");  // the path of the CA certificates database
 
  
  * -------- eof ------------